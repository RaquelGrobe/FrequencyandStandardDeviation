package com.company;

import static com.company.ProjConstants.*;

public class StDeviation {

    private int[] Data = new int[MAXDATA];

    // sets all values to invalid to allow some checking
    private int sdItems = INVALID;
    private int sdMinRange = INVALID_RANGE;
    private int sdMaxRange = INVALID_RANGE;
    private int calcMethod = INVALID_CALC_METHOD;
    private double sdAve = INVALID;
    private double sdVar = INVALID;
    private double sdDev = INVALID;

    // ******************************************************************************
    // ******************************************************************************

    // THERE ARE SEVERAL METHODS THAT WILL HAVE TO CHANGE IN THIS CLASS TO ALLOW THE
    // CALCULATION OF STANDARD DEVIATION USING THE FREQUENCY TABLE METHOD AS WELL.
    // PLEASE CONSIDER THE CHANGES THAT YOU WILL HAVE TO MAKE TO:
    //   - addNewDataItem (precondition is that calculation method is set)
    //   - calcAverage    (precondition is that data added, & calculation method is set)
    //   - calcVariance   (precondition is that average calculated, data added, & calculation method is set)

/*
The first step is to set a calculation method so that the user can select if they want to use discrete variables, a frequency table,
or grouped (although we don't have anything for grouped yet because that wasn't part of the assignment). In order to allow this to
happen, a switch/case statement must be set up with calcMethod being equal to what is selected. This is a void method.
 */
    public void setCalcMethod(int how2calculate) {

        switch (how2calculate) {
            case DISCRETE: {
                calcMethod = how2calculate;
                break;
            }
            case FRQTABLE: {
                calcMethod = how2calculate;
                break;
            }
            case GROUPED: {
            }
            default: {
                calcMethod = INVALID_CALC_METHOD;
                System.out.println("ERROR: Standard Deviation Method either UNIMPLEMENTED or UNKNOWN");
            }
        }
    }
    //the next step is to set up a method that will simply return calcMethod
    public int getCalcMethod() {
        return calcMethod;
    }
/*
************************************************************************************************************************
* next, a minimum and maximum range must be set. These is only necessary and will only be used if calcMethod = FRQTABLE
 */
    public void setMin(int userMin) {
        sdMinRange = userMin;
    }

    public int getMin() {
        return sdMinRange;
    }

    public void setMax(int userMax) {
        sdMaxRange = userMax;
    }

    public int getMax() {
        return sdMaxRange;
    }


    // ******************************************************************************
    // ******************************************************************************

    // --------------------------------------------------
    //now, we must add a new method for adding and keeping track of data items from the file
    // The following method (procedure) will take a new data item (a parameter)
    // and add it into the 1 Dimensional Array of data values to be used later.
    //
    //      Pre-Conditions:
    //          - none

    public void addNewDataItem(int dataItem) {

        // In this case we have to check if we are adding the first data item.
        // If sdItems = -1 then no data has been previously added so we set
        // the number of items to zero

        if ((sdItems == INVALID)) {
            sdItems = 0;
        }

        /*
        now we will make a switch/case statement for adding the data into the array. The case taht we will use in each scenario
        is dependent on what the user selected in the getCalcMethod. If the CalcMethod is DISCRETE, the data in each slot of the
        array is equal to one of the data points in the file. If the CalcMethod is FRQTABLE, a prerequisite is that both the minimum
        and the maximum are within range. If they are not, print that there is a range violation. If it is within range, the value of the
        indicated (by the file) slot in the array is equal to what the value in the array already is, plus one. This will keep track of
        frequency.
         */
        switch (getCalcMethod()) {

            case DISCRETE: {

                Data[sdItems] = dataItem;
                sdItems++;
                break;
            }

            case FRQTABLE: {

                if ((getMin() != INVALID_RANGE) && (getMax() != INVALID_RANGE)) {

                    if ((dataItem < getMin()) || (dataItem > getMax())) {

                        System.out.printf("ERROR: RANGE VIOLATION - Data Value ( %5.0 ), User Values: Minimum ( %5.0f ), Maxium ( %5.0f )",
                                dataItem, (double) getMin(), (double) getMax());

                    } else if ((dataItem < MINDATA) || (dataItem > MAXDATA)) {

                        System.out.printf("ERROR: RANGE VIOLATION - Data Value ( %5.0 ), System Values: DATAMIN ( %5.0f ), DATAMAX ( %5.0f )",
                                dataItem, (double) MINDATA, (double) MAXDATA);

                    } else {

                        Data[dataItem] = Data[dataItem] + 1;
                        sdItems++;

                    }
                } else {
                    System.out.printf("ERROR: RANGE VIOLATION - Range values not set");
                }
                break;
            }

            case GROUPED: {
            }

            default: {
                sdItems = INVALID;
                calcMethod = INVALID_CALC_METHOD;
                System.out.println("ERROR: Standard Deviation Calculation Method either UNIMPLEMENTED, or UNKNOWN");
                break;
            }
        }

    }

    // --------------------------------------------------
    // The following method (function) will return the total number of data
    // items currently stored

    //      Pre-Conditions:
    //          - none
    //
    public int getNumberOfDataItems() {
        return sdItems;
    }

    // --------------------------------------------------
    // The next step is to calculate the average
    // The following method (function) returns a double precision value which
    // is the average of all of the data values
    //
    //      Pre-Conditions:
    //          - at least one data has been added
    // This too will require a case/switch statement that is dependent upon what the user selects in the calcMethod method.
    //

    public double calcAverage() {

        switch (calcMethod) {
            case DISCRETE: {

                double total = 0;

                if (sdItems != INVALID) {

                    // Add all data values together (recall sdItems is the number of data items in the
                    // Data storage array
                    //
                    for (int i = 0; i < sdItems; i++) {
                        total = total + Data[i];
                    }

                    // calculate the average, (the average = the total/the number of items)
                    // the "(double)" below instructs the computer to treat
                    // the integer value of "sdItems" as a real number
                    //
                    sdAve = total / (double) sdItems;
                } else {
                    // Pre-Conditions have not been met
                    sdAve = INVALID;
                }

                break;
            }
            case FRQTABLE: {

                double productItem;
                double total = 0;

                if (sdItems != INVALID) {
            /*
            Run a for loop only if items have been read from the file.
            productItem is equal to the number being read multiplied by the frequency of that number in the file.
            total is equal to the total that has already been calculated (for when the loop has already been run)
            plus the productItem.
             */
                    for (int i = 0; i < sdItems; i++) {
                        productItem = Data[i] * i;
                        total = total + productItem;
                    }

                    // calculate the average, the "(double)" below instructs the computer to treat
                    // the integer value of "sdItems" as a real number
                    //
                    sdAve = total / (double) sdItems;
                } else {
                    // Pre-Conditions have not been met
                    sdAve = INVALID;
                }

                break;
            }
        }
    //returns the calculated average
        return sdAve;
    }
    // --------------------------------------------------
    // Now we must calculate the variance using another switch/case statement (dependent on calcMethod selected)
    // The following method (function) returns a double precision value which is the Variance of all
    // of the data values. If there is no data, or if the average has not been calculated
    // then it returns INVALID
    //
    //      Pre-Conditions:
    //          - at least one data has been added
    //          - the average must have been calculated
    //
    public double calcVariance() {

        double total = 0;
        double difference = 0;
        double diffSquared = 0;
        double frSquared = 0;
        double n = 0;

        switch (calcMethod) {
            case DISCRETE: {
                if ((sdItems != INVALID) || (sdAve != INVALID)){
                    // if statement checks that data entry and average have been done
                    // Loop over all data and calculate variance
                    //
                    for (int i = 0; i < sdItems; i++){
                    
                    //the difference is equal to the difference of the data point from the average
                        difference = (Data[i] - sdAve);
                        
                    //the difference to the power of 2
                        diffSquared = Math.pow(difference,2);
                        
                    /*
                    the total is built upon the more the loop is played. It starts at zero, and the diffSquared 
                    is added for each new data point in the file
                    */
                        total = total + diffSquared;

                    }

                    // to calculate the variance we need to divide by the number of data items,
                    // the "(double)" below instructs the computer to treat the integer value
                    // of "sdItems" as a real number
                    //
                    sdVar = total / (double) sdItems;

                }
                else {
                    // Pre-Conditions have not been met
                    sdVar = INVALID;
                }

                break;
            }
            case FRQTABLE: {
                if ((sdItems != INVALID) || (sdAve != INVALID)){
                //if statement checks that data entry and average have been done

                    for (int i = 0; i < sdItems; i++){
                        difference = (i - sdAve);
                        diffSquared = Math.pow(difference,2);
                        
                        /*
                        For finding the variance using a frequency table we need to multiply the difference from data point minus
                        the average by the frequency. Then we do that for all of the data in the array, and add all of those values
                        together. Finally, we add up all of the frequencies (which will essentially give us the total number of data
                        items)
                        */
                        frSquared = diffSquared * Data[i];
                        total = total + frSquared;
                        n = n + Data[i];

                    }
                    // the variance is equal to the total divided by the number of data items
                    sdVar = total / (double) n;

                }
                else {
                // Pre-conditions have not been met (data entry and/or average have not been done) 
                    sdVar = INVALID;
                }

                break;
            }
        }

        return sdVar;
    }

    // --------------------------------------------------
    // The following method (function) returns a double precision value which is the Standard
    // Deviation of all of the data values. If there is no data, no average, or if
    // the variance has not been calculated then it returns INVALID
    //
    //      Pre-Conditions:
    //          - at least one data has been added
    //          - the average must have been calculated
    //          - the variance must have been calculated
    //
    public double calcStandardDeviation(){

        // Checks that data entry, average, and variance have been done
        if ((sdItems != INVALID) || (sdAve != INVALID) || (sdVar != INVALID)) {
            sdDev = Math.sqrt(sdVar);
        }
        else {
            // Pre-Conditions have not been met
            sdDev = INVALID;
        }

        return sdDev;
    }

} // end of class

